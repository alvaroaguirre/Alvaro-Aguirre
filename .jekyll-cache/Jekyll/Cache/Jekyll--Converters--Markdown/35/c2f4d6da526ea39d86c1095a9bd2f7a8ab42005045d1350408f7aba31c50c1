I"œ/<h1 id="chord-of-the-day">Chord of the day</h1>
<h2 id="random-generation-using-python">Random generation using Python</h2>

<h3 id="alvaro-aguirre---november-2020">Alvaro Aguirre - November, 2020</h3>

<p>Iâ€™m sure there is some product online that you have had your eye on for a while. Maybe youâ€™re just waiting for the price to drop to buy it. In my case, I have been obsessed with <a href="https://fellowproducts.com/products/staggekg" target="_blank">Fellowâ€™s Stagg EKG Kettle</a> for a couple of weeks now. Itâ€™s the ultimate kettle for coffee brewing, but the elevated price tag puts me off from pulling the trigger on it. Since I wanted to keep learning some basic Python I thought why not create a simple script that checks the price daily, and sends me an email if it has gone down.</p>

<h4 id="libraries">Libraries</h4>

<p>The libraries we are going to use for this are <code class="language-plaintext highlighter-rouge">requests</code>, <code class="language-plaintext highlighter-rouge">bs4</code>, <code class="language-plaintext highlighter-rouge">smtplib</code> and <code class="language-plaintext highlighter-rouge">ssl</code>. If you donâ€™t have any installed, and have <code class="language-plaintext highlighter-rouge">pip</code>, you can run, for example:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">pip</span> <span class="n">install</span> <span class="n">bs4</span>
</code></pre></div></div>

<p>Once you have them all installed, letâ€™s load them:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="kn">import</span> <span class="nn">requests</span><span class="p">,</span> <span class="n">smtplib</span><span class="p">,</span> <span class="n">ssl</span>
<span class="kn">from</span> <span class="nn">bs4</span> <span class="kn">import</span> <span class="n">BeautifulSoup</span>
</code></pre></div></div>

<h4 id="webscrapping">Webscrapping</h4>

<p>We are going to use <code class="language-plaintext highlighter-rouge">BeautifulSoup</code> to access the website of a store that is selling the product, parse the html content, and extract the price. In my case, the product is sold by <a href="https://www.coffeedesk.com" target="_blank">CoffeeDesk</a>, a Polish retailer that fulfills Fellow products for Europe.</p>

<p>With <code class="language-plaintext highlighter-rouge">BeautifulSoup</code>, we can easily find elements of a website using their HTML tags, ids, or classes. A good way to find what you are looking for, is through the <em>Inspect Element</em> option of your web browser. You can right-click on the element you are interested it, select <em>Inspect</em>, and identify the HTML element. For example, in my case, the price is located in an object of type <code class="language-plaintext highlighter-rouge">span</code>, that has the class <code class="language-plaintext highlighter-rouge">product-price</code>:</p>

<p><img src="webscrap/screenshot.png" alt="Screenshot" /></p>

<p>Now we can make a simple HTTP request using the <code class="language-plaintext highlighter-rouge">requests</code> library. Then, we will use the <code class="language-plaintext highlighter-rouge">html.parser</code> to read the contents of the page. Finally, we will use <code class="language-plaintext highlighter-rouge">soup.find</code> to extract the element of the page we are interested in, the price. Note that this element will be extracted as a string. I will then format and transform it into a float so I can evaluate if it has increased or decreased.</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Store the contents of the url
</span><span class="n">page</span> <span class="o">=</span> <span class="n">requests</span><span class="p">.</span><span class="n">get</span><span class="p">(</span><span class="s">"https://www.coffeedesk.com/product/8558/Fellow-Stagg-Ekg-Electric-Pour-Over-Kettle-Matte-Black"</span><span class="p">)</span>

<span class="c1"># Use BeautifulSoup to parse it
</span><span class="n">soup</span> <span class="o">=</span> <span class="n">BeautifulSoup</span><span class="p">(</span><span class="n">page</span><span class="p">.</span><span class="n">content</span><span class="p">,</span> <span class="s">'html.parser'</span><span class="p">)</span>

<span class="c1"># Use the product-price class to find the current price, and format it into a float
</span><span class="n">price</span> <span class="o">=</span> <span class="nb">float</span><span class="p">(</span><span class="n">soup</span><span class="p">.</span><span class="n">find</span><span class="p">(</span><span class="s">'span'</span><span class="p">,</span> <span class="n">class_</span> <span class="o">=</span> <span class="s">'product-price'</span><span class="p">).</span><span class="n">text</span><span class="p">.</span><span class="n">split</span><span class="p">(</span><span class="s">" "</span><span class="p">)[</span><span class="mi">0</span><span class="p">].</span><span class="n">replace</span><span class="p">(</span><span class="s">","</span><span class="p">,</span><span class="s">"."</span><span class="p">))</span>
</code></pre></div></div>

<p>Nice! Now we have an object called <code class="language-plaintext highlighter-rouge">price</code> that holds the current price of the item. Since this code will run in a server daily, we want to receive an email in case the price has gone down. This just means a simple <code class="language-plaintext highlighter-rouge">if</code> condition. You can save and update the price object every day, and compare todayâ€™s value with yesterdayâ€™s value. Or, if you want a more straightforward solution, we can directly write the conditional in terms of the current price. Right now, this item is 166â‚¬, so I will do:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">166</span><span class="p">:</span>
    <span class="c1">#Send me an email
</span></code></pre></div></div>

<h4 id="sending-the-email">Sending the email</h4>

<p>Using the <code class="language-plaintext highlighter-rouge">smtplib</code> and <code class="language-plaintext highlighter-rouge">ssl</code> libraries, we will open a client sesison that allows us to send emails with Python. Letâ€™s prepare the email with the necessary objects:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Select a port
</span><span class="n">port</span> <span class="o">=</span> <span class="mi">465</span>

<span class="c1"># Choose a server, I will be sending it from a gmail account
</span><span class="n">smtp_server</span> <span class="o">=</span> <span class="s">"smtp.gmail.com"</span>

<span class="c1"># Email of the sender account
</span><span class="n">sender_email</span> <span class="o">=</span> <span class="s">"Enter the sender email here"</span>

<span class="c1"># Email of the receiver account
</span><span class="n">receiver_email</span> <span class="o">=</span> <span class="s">"Receiver email here"</span>

<span class="c1"># Password for the sender email
</span><span class="n">password</span> <span class="o">=</span> <span class="s">"Your password"</span>

<span class="c1"># Message to be sent
</span><span class="n">message</span> <span class="o">=</span> <span class="s">"""</span><span class="se">\
</span><span class="s">Subject: Fellow EKG for sale!

Hi Alvaro, 

This is Alvaro from the past.
If you are getting this, it means that the Fellow EKG is on sale on Coffeedesk.
The new price is """</span> <span class="o">+</span> <span class="nb">str</span><span class="p">(</span><span class="n">price</span><span class="p">)</span> <span class="o">+</span><span class="s">""" euros.
Here is the link in case you want to get it:

https://www.coffeedesk.com/product/8558/Fellow-Stagg-Ekg-Electric-Pour-Over-Kettle-Matte-Black

Hopefully it's a good deal!

Cheers,
Alvaro
"""</span>

<span class="c1"># Create SSL object
</span><span class="n">context</span> <span class="o">=</span> <span class="n">ssl</span><span class="p">.</span><span class="n">create_default_context</span><span class="p">()</span>
</code></pre></div></div>

<p>And now we are ready. If the <code class="language-plaintext highlighter-rouge">price</code> object is lower than 166, we will initialize the server using <code class="language-plaintext highlighter-rouge">smtplib</code>, login with the <code class="language-plaintext highlighter-rouge">sender_email</code> and <code class="language-plaintext highlighter-rouge">password</code>, and use <code class="language-plaintext highlighter-rouge">sendmail()</code> to send the message:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="c1"># Send the email if the price is lower than retail price
</span><span class="k">if</span> <span class="n">price</span> <span class="o">&lt;</span> <span class="mi">166</span><span class="p">:</span>
    <span class="k">with</span> <span class="n">smtplib</span><span class="p">.</span><span class="n">SMTP_SSL</span><span class="p">(</span><span class="n">smtp_server</span><span class="p">,</span> <span class="n">port</span><span class="p">,</span> <span class="n">context</span><span class="o">=</span><span class="n">context</span><span class="p">)</span> <span class="k">as</span> <span class="n">server</span><span class="p">:</span>
        <span class="n">server</span><span class="p">.</span><span class="n">login</span><span class="p">(</span><span class="n">sender_email</span><span class="p">,</span> <span class="n">password</span><span class="p">)</span>
        <span class="n">server</span><span class="p">.</span><span class="n">sendmail</span><span class="p">(</span><span class="n">sender_email</span><span class="p">,</span> <span class="n">receiver_email</span><span class="p">,</span> <span class="n">message</span><span class="p">)</span>
</code></pre></div></div>

<h4 id="uploading-the-code-to-a-server">Uploading the code to a server</h4>

<p>We are all done! We can save all the code on a <code class="language-plaintext highlighter-rouge">.py</code> file, like I have done <a href="webscrap/OnSale.py" target="_blank">here</a>. Whenever you run the file, the program will check for the current price on the website, and if it is lower than what you specified, it will send you an email. Of course, this involves having to run the code. If we were to manually do this it would be completely useless, since in the same time you could open the URL and check for yourself. What I have done is uploaded the Python file to my AWS EC2, and created a <code class="language-plaintext highlighter-rouge">cron</code> job that runs the code automatically every day at noon. So, regardless if Iâ€™m at home, at work, walking, with the computer on or off, etc, the code will be executed daily.</p>

<p>To program a <code class="language-plaintext highlighter-rouge">cron</code> job, you need to add the job to your <code class="language-plaintext highlighter-rouge">crontab</code>, you can access it from your terminal:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>crontab <span class="nt">-e</span>
</code></pre></div></div>

<p>And once the crontab file opens, write:</p>

<div class="language-bash highlighter-rouge"><div class="highlight"><pre class="highlight"><code>0 12 <span class="k">*</span> <span class="k">*</span> <span class="k">*</span> python3 myfile.py
</code></pre></div></div>

<p>The code simply means that every day at noon, the program <code class="language-plaintext highlighter-rouge">myfile.py</code> will be executed. If you want some tips on how to schedule <code class="language-plaintext highlighter-rouge">cron</code> jobs, this page is quite helpful: <a href="https://crontab.guru" target="_blank">https://crontab.guru</a></p>
:ET